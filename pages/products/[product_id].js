import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/Home.module.css";
import { client, requestBuilder, headers } from "../../lib/client";

export default function ProductDetails({ product_id, data, reviews }) {
  const [showForm, setShowForm] = useState(false);
  const [reviewSubmitted, setReviewSubmitted] = useState(false);

  const [formData, setFormData] = useState({
    authorName: "",
    title: "",
    text: "",
    rating: "",
    target: {
      typeId: "product",
      id: product_id,
    },
    // state: {
    //   key: "to-approve",
    // },
  });

  const submitForm = (event) => {
    event.preventDefault();

    const formDataParsed = formData;
    formDataParsed.rating = Number(formDataParsed.rating);

    client
      .execute({
        uri: requestBuilder.reviews.build(),
        method: "POST",
        headers,
        body: JSON.stringify(formDataParsed),
      })
      .then((result) => {
        console.log({ result });
        setReviewSubmitted(true);
      })
      .catch((error) => {
        console.log({ error });
      });
  };

  const toggleReviewForm = () => {
    setShowForm(true);
  };

  const handleInputChange = (event) => {
    setFormData({ ...formData, [event.target.name]: event.target.value });
  };

  const currentData = data.masterData.current;
  const reviewRatingStatistics = data.reviewRatingStatistics;
  const masterImage = currentData.masterVariant.images[0];

  return (
    <div className={styles.container}>
      <Head>
        <title>Barkbox PDP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {currentData.name["en-US"] || currentData.name["en"]}
        </h1>
        <Image src={masterImage.url} alt="Product" width={200} height={200} />
        <p>{`Reviews (${reviewRatingStatistics.count})`}</p>
        {reviews.results.map((review) => {
          return (
            <div key={review.id}>
              <p>{review.title}</p>
              <p>{review.text}</p>
              <p>Author: {review.authorName}</p>

              <p>Rating: {review.rating}</p>
            </div>
          );
        })}
        {showForm ? (
          <>
            {reviewSubmitted ? (
              <p>Review Submitted!</p>
            ) : (
              <form onSubmit={submitForm}>
                <label>
                  Author Name:
                  <input
                    name="authorName"
                    value={formData.authorName}
                    onChange={handleInputChange}
                  />
                </label>
                <br />
                <label>
                  title:
                  <input
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                  />
                </label>
                <br />
                <label>
                  text:
                  <input
                    name="text"
                    value={formData.text}
                    onChange={handleInputChange}
                  />
                </label>
                <br />
                <label>
                  rating:
                  <input
                    name="rating"
                    type="number"
                    value={formData.rating}
                    onChange={handleInputChange}
                  />
                </label>
                <br />
                <input type="submit" value="Submit"></input>
              </form>
            )}
          </>
        ) : (
          <button onClick={toggleReviewForm}>Add a Review!</button>
        )}
      </main>
    </div>
  );
}

export async function getServerSideProps(context) {
  // Fetch Product Reviews

  const reviews = await client
    .execute({
      uri: requestBuilder.reviews
        .where(
          `target(typeId = "product" and id = "${context.params.product_id}")`
        )
        .build(),
      method: "GET",
      headers,
    })
    .then((result) => {
      return result.body;
    })
    .catch((error) => {
      console.log({ error });
    });

  // Fetch PDP Info
  const data = await client
    .execute({
      uri: requestBuilder.products.byId(context.params.product_id).build(),
      method: "GET",
      headers,
    })
    .then((result) => {
      return result.body;
    })
    .catch((error) => {
      console.log({ error });
    });

  return {
    props: { product_id: context.params.product_id, data, reviews },
  };
}
