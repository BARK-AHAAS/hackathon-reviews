import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { client, requestBuilder, headers } from "/lib/client";

export default function ProductDetails({ product_id, data, reviews }) {
  const [showForm, setShowForm] = useState(false);
  const [reviewSubmitted, setReviewSubmitted] = useState(false);

  const [formData, setFormData] = useState({
    authorName: "",
    title: "",
    text: "",
    rating: "",
    target: {
      typeId: "product",
      id: product_id,
    },
    custom: {
      type: {
        key: "review-imageUrl",
        typeId: "type",
      },
      fields: {
        imageUrl:
          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0zWhwYX79rRlhq9o84wHx8JSFNaRgV0ESDw&usqp=CAU",
      },
    },
    state: {
      key: "to-approve",
    },
  });

  const submitForm = (event) => {
    event.preventDefault();

    const formDataParsed = formData;
    formDataParsed.rating = Number(formDataParsed.rating);

    client
      .execute({
        uri: requestBuilder.reviews.build(),
        method: "POST",
        headers,
        body: JSON.stringify(formDataParsed),
      })
      .then((result) => {
        console.log({ result });
        setReviewSubmitted(true);
      })
      .catch((error) => {
        console.log({ error });
      });
  };

  const toggleReviewForm = () => {
    setShowForm(true);
  };

  const handleInputChange = (event) => {
    setFormData({ ...formData, [event.target.name]: event.target.value });
  };

  const currentData = data.masterData.current;
  const reviewRatingStatistics = data.reviewRatingStatistics;
  const masterImage = currentData.masterVariant.images[0];

  return (
    <div>
      <Head>
        <title>Barkbox PDP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="flex p-6 font-mono">
          <div className="flex-none w-48 mb-10 relative z-10 before:absolute before:top-1 before:left-1 before:w-full before:h-full before:bg-teal-400">
            <Image
              src={masterImage.url}
              alt="Product"
              className="absolute z-10 inset-0 w-full h-full object-cover rounded-lg"
              loading="lazy"
              width={200}
              height={200}
            />
          </div>
          <div className="p-8 text-left">
            <figcaption className="font-medium">
              <div className="text-teal-400">
                {currentData.name["en-US"] || currentData.name["en"]}
              </div>
              <div className="text-slate-700 dark:text-slate-500">
                {`Reviews (${reviewRatingStatistics?.count || 0})`}
              </div>
            </figcaption>
            {showForm ? (
              <>
                {reviewSubmitted ? (
                  <p>Review Submitted!</p>
                ) : (
                  <form
                    onSubmit={submitForm}
                    className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
                  >
                    <div className="mb-4">
                      <label
                        className="block text-gray-700 text-sm font-bold mb-2"
                        htmlFor="authorName"
                      >
                        Author Name:
                      </label>
                      <input
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        id="authorName"
                        type="text"
                        name="authorName"
                        value={formData.authorName}
                        onChange={handleInputChange}
                      />
                    </div>
                    <div className="mb-4">
                      <label
                        className="block text-gray-700 text-sm font-bold mb-2"
                        htmlFor="title"
                      >
                        Title:
                      </label>
                      <input
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        id="title"
                        type="text"
                        name="title"
                        value={formData.title}
                        onChange={handleInputChange}
                      />
                    </div>
                    <div className="mb-4">
                      <label
                        className="block text-gray-700 text-sm font-bold mb-2"
                        htmlFor="text"
                      >
                        Full Review:
                      </label>
                      <input
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        id="text"
                        type="text"
                        name="text"
                        value={formData.text}
                        onChange={handleInputChange}
                      />
                    </div>

                    <div className="mb-4">
                      <label
                        className="block text-gray-700 text-sm font-bold mb-2"
                        htmlFor="rating"
                      >
                        Rating:
                      </label>
                      <input
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        id="rating"
                        type="number"
                        name="rating"
                        value={formData.rating}
                        onChange={handleInputChange}
                      />
                    </div>

                    <input
                      className="px-6 h-12 uppercase font-semibold tracking-wider border-2 border-black bg-teal-400 text-black"
                      type="submit"
                      value="Submit"
                    ></input>
                  </form>
                )}
              </>
            ) : (
              <button
                className="px-6 h-12 uppercase font-semibold tracking-wider border-2 border-black bg-teal-400 text-black"
                onClick={toggleReviewForm}
              >
                Add a Review!
              </button>
            )}
          </div>
        </div>
        {reviews.results.map((review) => {
          return (
            <div key={review.id} className="p-6 bg-black border border-sky-500">
              <div className="relative flex flex-wrap items-baseline">
                <h1 className="relative w-full flex-none mb-2 text-2xl font-semibold text-white">
                  {review.title}
                </h1>
                <div className="relative text-lg text-white">
                  Rating: {review.rating}
                </div>
                <div className="relative uppercase text-teal-400 ml-3">
                  Author: {review.authorName}
                </div>
                <p className="relative text-teal-200 ml-3">{review.text}</p>
              </div>

              {review.custom && (
                <picture className="z-10">
                  <source
                    srcSet={review.custom.fields.imageUrl}
                    type="image/webp"
                  />
                  <img src={review.custom.fields.imageUrl} alt="Product" />
                </picture>
              )}
            </div>
          );
        })}
      </main>
    </div>
  );
}

export async function getServerSideProps(context) {
  // Fetch Product Reviews

  const reviews = await client
    .execute({
      uri: requestBuilder.reviews
        .where(
          `target(typeId = "product" and id = "${context.params.product_id}")`
        )
        .where(
          `state(id = "fd3a8187-63f3-4545-817f-c782983bf5db")`
        )
        .build(),
      method: "GET",
      headers,
    })
    .then((result) => {
      return result.body;
    })
    .catch((error) => {
      console.log({ error });
    });

  // Fetch PDP Info
  const data = await client
    .execute({
      uri: requestBuilder.products.byId(context.params.product_id).build(),
      method: "GET",
      headers,
    })
    .then((result) => {
      return result.body;
    })
    .catch((error) => {
      console.log({ error });
    });

  return {
    props: { product_id: context.params.product_id, data, reviews },
  };
}
